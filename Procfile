web: gunicorn server:app
worker: python3 -m telegram.ext.updater```
এই ফাইলটি Render-কে নির্দেশ দেয়:
*   `web:` একটি gunicorn ওয়েব সার্ভার চালাও (`server.py` থেকে `app` অবজেক্ট ব্যবহার করে)।
*   `worker:` একটি আলাদা কর্মী (worker) হিসেবে তোমার টেলিগ্রাম বটটি চালাও।

#### ধাপ ৩: Render-এর সেটিংস পরিবর্তন করা

1.  আপনার Render Dashboard-এ যান এবং আপনার `hubcoin` সার্ভিসের **"Settings"** ট্যাবে যান।
2.  **"Build & Deploy"** সেকশনটি খুঁজুন।
3.  **Start Command:** `gunicorn server:app` লেখাটি মুছে দিয়ে সেখানে `gunicorn -w 4 server:app` লিখুন। Render আপনার `Procfile` ফাইলটি দেখলে এটি আর ব্যবহার করবে না, কিন্তু এটি একটি ভালো অভ্যাস।
4.  নিশ্চিত করুন আপনার Instance Type টি `Free` এর বদলে অন্তত `Starter` প্ল্যানে আছে, কারণ Free প্ল্যান background worker সমর্থন করে না। তবে আপনি প্রথমে Free প্ল্যানেই চেষ্টা করে দেখতে পারেন। যদি worker না চলে, আপনাকে `Starter` প্ল্যানে আপগ্রেড করতে হবে।
5.  **"Save Changes"** এ ক্লিক করুন।

**ফাইনাল কাজ:**

1.  আপনার লোকাল পিসিতে `server.py` ফাইলটি আপডেট করুন।
2.  `Procfile` নামে নতুন ফাইলটি তৈরি করুন।
3.  এই দুটি পরিবর্তন আপনার **GitHub রিপোজিটরিতে পুশ করুন**।
4.  Render-এ গিয়ে **"Manual Deploy"** > **"Deploy latest commit"** এ ক্লিক করুন।

এই পরিবর্তনগুলো করার পর আপনার অ্যাপ এবং বট দুটোই সঠিকভাবে কাজ করা শুরু করবে। Render এখন দুটি প্রক্রিয়া একসাথে চালাবে, এবং আপনার মিনি অ্যাপ সফলভাবে ব্যাকএন্ডের সাথে যোগাযোগ করতে পারবে।